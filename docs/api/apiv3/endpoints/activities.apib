# Group Activities

Activities are changes by users made on some resource in the OpenProject instance. This includes but is not limited to:

* Updating a work package
* Inviting a user to become a member in the project
* Creating a wiki page.

Because it is the byproduct of a users action on a resource, an activity cannot be created explicitly.

However, not every activity is necessarily a change on a resource. Sometimes, a user simply comments on a resource. This is also tracked as an activity.

## Linked Properties
|  Link                              | Description                                                         | Type                        | Constraints       | Supported operations |
|:-------------------:               |-----------------------------------------                            | -------------               | ----------------- | -------------------- |
| self                               | This activity                                                       | Activity                    | not null          | READ                 |
| user                               | The user who made the change                                        | User                        | not null          | READ                 |
| workPackage (to be generalized )   | The resource (e.g. work package) on which the change was performed  | Resource (e.g. WorkPackage) | not null          | READ                 |

## Local Properties
| Property    | Description      | Type                 | Constraints | Supported operations |
| :---------: | -------------    | ----                 | ----------- | -------------------- |
| id          | Activity id      | Integer              | x > 0       | READ                 |
| version     | Activity version | Integer              | x > 0       | READ                 |
| comment     |                  | Formattable          |             | READ / WRITE         |
| details     |                  | Array of Formattable |             | READ                 |
| createdAt   | Time of creation | DateTime             |             | READ                 |

Activity can be either _type Activity or _type Activity::Comment.

## View activity [/api/v3/activities/{id}]

+ Model
    + Body

            {
                "_type": "Activity::Comment",
                "_links": {
                    "self": {
                        "href": "/api/v3/activity/1",
                        "title": "Priority changed from High to Low"
                    },
                    "workPackage": {
                        "href": "/api/v3/work_packages/1",
                        "title": "quis numquam qui voluptatum quia praesentium blanditiis nisi"
                    },
                    "user": {
                        "href": "/api/v3/users/1",
                        "title": "John Sheppard - admin"
                    }
                },
                "id": 1,
                "details": [
                    {
                        "format": "markdown",
                        "raw": "Lorem ipsum dolor sit amet.",
                        "html": "<p>Lorem ipsum dolor sit amet.</p>"
                    }
                ],
                "comment": {
                    "format": "markdown",
                    "raw": "Lorem ipsum dolor sit amet.",
                    "html": "<p>Lorem ipsum dolor sit amet.</p>"
                },
                "createdAt": "2014-05-21T08:51:20Z",
                "version": 31
            }

## View activity [GET]

+ Parameters
    + id (required, integer, `1`) ... Activity id

+ Response 200 (application/hal+json)

    [View activity][]

## Update activity [/api/v3/activities/{id}]

## Update activity [PATCH]

Updates an activity's comment and, on success, returns the updated activity. The other properties of the activity
cannot be altered.

+ Parameters
    + id (required, integer, `1`) ... Activity id

+ Request (application/json)

        {
          "comment": { "raw": "The updated comment" }
        }

+ Response 200 (application/hal+json)

    [View activity][]

+ Response 400 (application/hal+json)

    Occurs when the client did not send a valid JSON object in the request body.

    + Body

            {
                "_type": "Error",
                "errorIdentifier": "urn:openproject-org:api:v3:errors:InvalidRequestBody",
                "message": "The request body was not a single JSON object."
            }

+ Response 403 (application/hal+json)

    Returned if the client does not have sufficient permissions.

    **Required permission:** edit journals

    + Body

            {
                "_type": "Error",
                "errorIdentifier": "urn:openproject-org:api:v3:errors:MissingPermission",
                "message": "You are not allowed to edit the comment of this journal entry."
            }


+ Response 422 (application/hal+json)

    Returned if the client tries to modify a read-only property.

    + Body

            {
                "_type": "Error",
                "errorIdentifier": "urn:openproject-org:api:v3:errors:PropertyIsReadOnly",
                "message": "The ID of an activity can't be changed."
            }

## List activities [/api/v3/activities{?filters,sortBy}]

+ Model
    + Body

            {
                "_links": {
                    "self": { "href": "/api/v3/activities" }
                },
                "total": 2,
                "count": 2,
                "_type": "Collection",
                "_embedded":
                {
                    "elements": [
                        {
                            "_type": "Activity::Comment",
                            "_links": {
                                "self": {
                                    "href": "/api/v3/activity/1",
                                    "title": "Priority changed from High to Low"
                                },
                                "workPackage": {
                                    "href": "/api/v3/work_packages/1",
                                    "title": "quis numquam qui voluptatum quia praesentium blanditiis nisi"
                                },
                                "user": {
                                    "href": "/api/v3/users/1",
                                    "title": "John Sheppard - admin"
                                }
                            },
                            "id": 1,
                            "details": [
                                {
                                    "format": "markdown",
                                    "raw": "Lorem ipsum dolor sit amet.",
                                    "html": "<p>Lorem ipsum dolor sit amet.</p>"
                                }
                            ],
                            "comment": {
                                "format": "markdown",
                                "raw": "Lorem ipsum dolor sit amet.",
                                "html": "<p>Lorem ipsum dolor sit amet.</p>"
                            },
                            "createdAt": "2014-05-21T08:51:20Z",
                            "version": 31
                        },
                        <-- omitted for brevity -->
                    ]
                }
            }

## List activities [GET]

Returns a collection of activities. The client can choose to filter the activities similar to how work packages are filtered.
In addition to the provided filters, the server will reduce the result set to only contain activities, for which the requesting client has sufficient permissions.
The required permissions depend on the resource the activity is associated with.
E.g. in case of a work package, the client needs the view_work_packages permission in the project of the altered work package.

+ Parameters
    + filters (optional, string, `[{ "created_at": { "operator": "<>d", "values": ["2021-06-08T02:00:00+02:00"] }" }]`) ... JSON specifying filter conditions.
    Accepts the same format as returned by the [queries](#queries) endpoint.
    Currently supported filters are:
      + created_at: filters activities based on creation time.

    + sortBy = ["id", "asc"] (optional, string, `[["id", "asc"]]`) ... JSON specifying sort criteria.
    Accepts the same format as returned by the [queries](#queries) endpoint. Currently supported sorts are:
      + id: Sort by primary key
      + created_at: Sort by activity creation datetime

+ Response 200 (application/hal+json)

    [List activities][]
